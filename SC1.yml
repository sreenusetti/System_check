---
- name: Health Check for Linux and Windows Nodes
  hosts: all
  gather_facts: true

  tasks:
    # =========================
    # Per-host data collection
    # =========================
    - name: Per-host resource collection and fact setting
      block:
        - name: Set OS family fact
          set_fact:
            os_family: "{{ ansible_facts['os_family'] }}"

        # --- Linux Collection ---
        - when: os_family == "RedHat"
          block:
            - name: Get CPU usage (Linux)
              shell: top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}'
              register: linux_cpu
              changed_when: false
            - name: Get Memory usage (Linux)
              shell: free | awk '/Mem:/ {print ($3/$2) * 100}'
              register: linux_mem
              changed_when: false
            - name: Get Disk usage (Linux)
              shell: df / | awk 'NR==2 {print $5}' | sed 's/%//'
              register: linux_disk
              changed_when: false

        # --- Windows Collection ---
        - when: os_family == "Windows"
          block:
            - name: Get CPU usage (Windows)
              win_shell: '[math]::Round((Get-Counter "\Processor(_Total)\% Processor Time").CounterSamples.CookedValue, 2)'
              register: win_cpu
              changed_when: false
            - name: Get Memory usage (Windows)
              win_shell: |
                $mem = Get-CimInstance Win32_OperatingSystem
                [math]::Round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2)
              register: win_mem
              changed_when: false
            - name: Get Disk usage (Windows)
              win_shell: |
                $disk = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
                [math]::Round((($disk.Size - $disk.FreeSpace) / $disk.Size) * 100, 2)
              register: win_disk
              changed_when: false

        # Task 1 - Create the unified variables
        - name: Unify resource values
          set_fact:
            cpu: "{{ (os_family == 'RedHat') | ternary(linux_cpu.stdout, win_cpu.stdout) }}"
            ram: "{{ (os_family == 'RedHat') | ternary(linux_mem.stdout, win_mem.stdout) }}"
            disk: "{{ (os_family == 'RedHat') | ternary(linux_disk.stdout, win_disk.stdout) }}"

        # Task 2 - Use the variables, casting them to numbers at the moment of comparison
        - name: Determine health status from unified values
          set_fact:
            status: "{{ 'CRITICAL' if cpu | float > 60 or ram | float > 60 or disk | float > 60 else 'GOOD' }}"
      # End of the per-host block

    # =========================================================
    # Final Reporting Task (at the end of the SAME play)
    # =========================================================
    - name: Print summary report to the job output
      run_once: true          # <-- This task runs only one time for the entire play
      delegate_to: localhost  # <-- It physically runs on the control node
      debug:
        msg: |
          
          ####################################################################
          #                 Node Health Check Summary Report                 #
          ####################################################################
          
          {% for host in ansible_play_hosts_all %}
          HOST: {{ '%-20s' | format(hostvars[host].inventory_hostname) }} | OS: {{ '%-10s' | format(hostvars[host].os_family | default('N/A')) }} | CPU: {{ '%-8s' | format((hostvars[host].cpu | float | round(2) | string ~ '%') if hostvars[host].cpu is defined else 'N/A') }} | RAM: {{ '%-8s' | format((hostvars[host].ram | float | round(2) | string ~ '%') if hostvars[host].ram is defined else 'N/A') }} | Disk: {{ '%-8s' | format((hostvars[host].disk | float | round(2) | string ~ '%') if hostvars[host].disk is defined else 'N/A') }} | STATUS: {{ hostvars[host].status | default('FAILED_TO_GATHER') }}
          {% endfor %}

          ####################################################################
