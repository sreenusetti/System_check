---
- name: Health Check for Linux and Windows Nodes
  hosts: all
  gather_facts: true

  vars:
    log_dir:  'C:\Temp\logfile'
    log_file: "{{ log_dir }}\\health_check_{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:
    - name: Starting health check on {{ inventory_hostname }}
      ansible.builtin.debug:
        msg: "⏱️"

    - name: Determine OS family
      ansible.builtin.set_fact:
        os_family: "{{ ansible_facts['os_family'] }}"

    # — Linux section —
    - name: Copy & run check.sh on RedHat
      when: os_family == 'RedHat'
      block:
        - name: Copy check.sh
          ansible.builtin.copy:
            src: scripts/check.sh
            dest: /usr/local/bin/check.sh
            mode: '0755'
        - name: Execute check.sh
          ansible.builtin.shell: /usr/local/bin/check.sh
          register: linux_script_out
          changed_when: false
          failed_when: linux_script_out.rc != 0

    # — Windows section —
    - name: Copy & run check.ps1 on Windows
      when: os_family == 'Windows'
      block:
        - name: Ensure C:\Scripts exists
          ansible.windows.win_file:
            path: 'C:\Scripts'
            state: directory
        - name: Copy check.ps1
          ansible.windows.win_copy:
            src: scripts/check.ps1
            dest: 'C:\Scripts\check.ps1'
        - name: Execute check.ps1
          ansible.windows.win_shell: 'C:\Scripts\check.ps1'
          register: win_script_out
          changed_when: false
          failed_when: win_script_out.rc != 0

    # — Aggregate whatever output we got —
    - name: Set unified script_output
      ansible.builtin.set_fact:
        script_output: >-
          {{ linux_script_out.stdout | default('') }}
          {{ win_script_out.stdout  | default('') }}

    # — Extract numeric values as floats —
    - name: Extract CPU, RAM, DISK percentages
      ansible.builtin.set_fact:
        cpu:  "{{ (script_output | regex_findall('CPU=(\\d+\\.?\\d*)') | first | default(0)) | float }}"
        ram:  "{{ (script_output | regex_findall('RAM=(\\d+\\.?\\d*)') | first | default(0)) | float }}"
        disk: "{{ (script_output | regex_findall('DISK=(\\d+\\.?\\d*)') | first | default(0)) | float }}"

    - name: Determine overall status
      ansible.builtin.set_fact:
        status: "{{ 'CRITICAL' if cpu > 60 or ram > 60 or disk > 60 else 'GOOD' }}"

    - name: Debug metrics on {{ inventory_hostname }}
      ansible.builtin.debug:
        msg: "Host={{ inventory_hostname }} CPU={{ cpu }}% RAM={{ ram }}% DISK={{ disk }}% STATUS={{ status }}"

    # — Only on the designated logging node, write out the full summary —
    - name: Ensure log directory exists on logger node
      ansible.windows.win_file:
        path: "{{ log_dir }}"
        state: directory
      when: inventory_hostname == '10.206.2.30'

    - name: Write consolidated health summary to log file
      ansible.windows.win_copy:
        dest: "{{ log_file }}"
        content: |
          ####################################################################
          #                Node Health Check Summary Report                 #
          ####################################################################
          {% for host in ansible_play_hosts_all %}
          Host:   {{ '%-20s'|format(hostvars[host].inventory_hostname) }}
          OS:     {{ '%-10s'|format(hostvars[host].os_family) }}
          CPU:    {{ '%6.2f%%'|format(hostvars[host].cpu) }}
          RAM:    {{ '%6.2f%%'|format(hostvars[host].ram) }}
          DISK:   {{ '%6.2f%%'|format(hostvars[host].disk) }}
          STATUS: {{ hostvars[host].status }}
          --------------------------------------------------------------------
          {% endfor %}
          Job ID:      {{ awx_job_id | default('manual_job_' + ansible_date_time.iso8601_basic_short) }}
          Time:        {{ ansible_date_time.iso8601 }}
          Executed by: {{ ansible_user_id }}
          Log File:    {{ log_file }}
          ####################################################################
      when: inventory_hostname == '10.206.2.30'

    - name: Verify log file existence on logger node
      ansible.windows.win_stat:
        path: "{{ log_file }}"
      register: log_stat
      failed_when: not log_stat.stat.exists or not log_stat.stat.isreg
      when: inventory_hostname == '10.206.2.30'

    - name: Debug log file check
      ansible.builtin.debug:
        msg: "Log {{ log_file }} exists={{ log_stat.stat.exists }}, isreg={{ log_stat.stat.isreg }}"
      when: inventory_hostname == '10.206.2.30'
