---
- name: Gather and compute health metrics
  hosts: all
  gather_facts: true

  vars:
    log_dir: 'C:\Temp\logfile'
    log_file: "{{ log_dir }}\\health_check_{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:
    - name: Determine OS family
      set_fact:
        os_family: "{{ ansible_facts.os_family }}"

    - name: Copy & run check.sh on RedHat
      when: os_family == 'RedHat'
      block:
        - copy:
            src: scripts/check.sh
            dest: /usr/local/bin/check.sh
            mode: '0755'
        - shell: /usr/local/bin/check.sh
          register: linux_out
          changed_when: false
          failed_when: linux_out.rc != 0

    - name: Copy & run check.ps1 on Windows
      when: os_family == 'Windows'
      block:
        - win_file:
            path: 'C:\Scripts'
            state: directory
        - win_copy:
            src: scripts/check.ps1
            dest: 'C:\Scripts\check.ps1'
        - win_shell: 'C:\Scripts\check.ps1'
          register: win_out
          changed_when: false
          failed_when: win_out.rc != 0

    - name: Aggregate script output
      set_fact:
        script_output: "{{ linux_out.stdout | default('') }}{{ win_out.stdout | default('') }}"

    - name: Extract metrics as floats
      set_fact:
        cpu:  "{{ script_output | regex_search('CPU=(\\d+\\.?\\d*)','\\1') | default('0') | float }}"
        ram:  "{{ script_output | regex_search('RAM=(\\d+\\.?\\d*)','\\1') | default('0') | float }}"
        disk: "{{ script_output | regex_search('DISK=(\\d+\\.?\\d*)','\\1') | default('0') | float }}"

    - name: Determine overall status
      set_fact:
        status: "{{ 'CRITICAL' if (cpu|float) > 60 or (ram|float) > 60 or (disk|float) > 60 else 'GOOD' }}"

    - debug:
        msg: "Host={{ inventory_hostname }} CPU={{ cpu }}% RAM={{ ram }}% DISK={{ disk }}% STATUS={{ status }}"

- name: Write consolidated report on logger node
  hosts: 10.206.2.30
  gather_facts: false

  vars:
    log_dir: 'C:\Temp\logfile'
    log_file: "{{ log_dir }}\\health_check_{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:
    - name: Ensure log directory exists
      win_file:
        path: "{{ log_dir }}"
        state: directory

    - name: Write health summary to log file
      win_copy:
        dest: "{{ log_file }}"
        content: |
          ####################################################################
          #                Node Health Check Summary Report                 #
          ####################################################################
          {% for host in ansible_play_hosts_all %}
          Host:   {{ '%-20s'|format(hostvars[host].inventory_hostname) }}
          OS:     {{ '%-10s'|format(hostvars[host].os_family) }}
          CPU:    {{ '%.2f%%'|format(hostvars[host].cpu|float) }}
          RAM:    {{ '%.2f%%'|format(hostvars[host].ram|float) }}
          DISK:   {{ '%.2f%%'|format(hostvars[host].disk|float) }}
          STATUS: {{ hostvars[host].status }}
          --------------------------------------------------------------------
          {% endfor %}
          Job ID:      {{ awx_job_id | default('manual_job_' + ansible_date_time.iso8601_basic_short) }}
          Time:        {{ ansible_date_time.iso8601 }}
          Executed by: {{ ansible_user_id }}
          Log File:    {{ log_file }}
          ####################################################################

    - name: Verify log file exists
      win_stat:
        path: "{{ log_file }}"
      register: log_stat

    - debug:
        msg: "Log exists={{ log_stat.stat.exists }}, isreg={{ log_stat.stat.isreg }}"
