---
- name: Health Check for Linux and Windows Nodes
  hosts: all
  gather_facts: true

  vars:
    report_host:   '10.206.2.30'
    report_dir:    'C:\Temp\logs'
    report_file:   "{{ report_dir }}\\health_check_{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:
    - name: Set OS family fact
      ansible.builtin.set_fact:
        os_family: "{{ ansible_facts.os_family }}"

    - name: Get CPU usage (Linux)
      ansible.builtin.shell: |
        top -bn1 | awk -F'id,' '/Cpu\\(s\\)/{ split($1, vs, ","); sub(/.* /,"", vs[1]); printf("%.2f", 100 - vs[1]) }'
      register: linux_cpu
      changed_when: false
      when: os_family == 'RedHat'

    - name: Get Memory usage (Linux)
      ansible.builtin.shell: |
        free | awk '/Mem:/ { printf("%.2f", $3/$2*100) }'
      register: linux_mem
      changed_when: false
      when: os_family == 'RedHat'

    - name: Get Disk usage (Linux)
      ansible.builtin.shell: |
        df / | awk 'NR==2 { gsub(/%/,"",$5); printf("%.2f", $5) }'
      register: linux_disk
      changed_when: false
      when: os_family == 'RedHat'

    - name: Get CPU usage (Windows)
      ansible.windows.win_shell: |
        [math]::Round((Get-Counter "\Processor(_Total)\% Processor Time").CounterSamples.CookedValue, 2)
      register: win_cpu
      changed_when: false
      when: os_family == 'Windows'

    - name: Get Memory usage (Windows)
      ansible.windows.win_shell: |
        $m = Get-CimInstance Win32_OperatingSystem;
        [math]::Round((($m.TotalVisibleMemorySize - $m.FreePhysicalMemory)/$m.TotalVisibleMemorySize)*100,2)
      register: win_mem
      changed_when: false
      when: os_family == 'Windows'

    - name: Get Disk usage (Windows)
      ansible.windows.win_shell: |
        $d = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'";
        [math]::Round((($d.Size-$d.FreeSpace)/$d.Size)*100,2)
      register: win_disk
      changed_when: false
      when: os_family == 'Windows'

    - name: Unify resource values into floats
      ansible.builtin.set_fact:
        cpu:  "{{ (os_family == 'RedHat') | ternary(linux_cpu.stdout, win_cpu.stdout)  | float }}"
        ram:  "{{ (os_family == 'RedHat') | ternary(linux_mem.stdout, win_mem.stdout)  | float }}"
        disk: "{{ (os_family == 'RedHat') | ternary(linux_disk.stdout, win_disk.stdout) | float }}"

    - name: Determine health status
      ansible.builtin.set_fact:
        status: "{{ 'CRITICAL' if (cpu > 60) or (ram > 60) or (disk > 60) else 'GOOD' }}"

    - name: Debug per-host metrics
      ansible.builtin.debug:
        msg: "Host={{ inventory_hostname }} OS={{ os_family }} CPU={{ cpu }}% RAM={{ ram }}% DISK={{ disk }}% STATUS={{ status }}"

    - name: Build consolidated report lines
      ansible.builtin.set_fact:
        report_lines: >-
          {% set lines = [] %}
          {% do lines.append('####################################################################') %}
          {% do lines.append('#                 Node Health Check Summary Report                #') %}
          {% do lines.append('####################################################################') %}
          {% for h in ansible_play_hosts_all %}
          {% set fmt = '%-18s | %-8s | %6.2f%% | %6.2f%% | %6.2f%% | %s' %}
          {% do lines.append(fmt|format(
            hostvars[h].inventory_hostname,
            hostvars[h].os_family,
            hostvars[h].cpu,
            hostvars[h].ram,
            hostvars[h].disk,
            hostvars[h].status
          )) %}
          {% endfor %}
          {% do lines.append('####################################################################') %}
          {{ lines }}
      run_once: true

    - name: Ensure report directory exists on report host
      ansible.windows.win_file:
        path: "{{ report_dir }}"
        state: directory
      run_once: true
      delegate_to: "{{ report_host }}"

    - name: Write report file on report host
      ansible.windows.win_copy:
        dest: "{{ report_file }}"
        content: "{{ report_lines | join('\r\n') }}"
      run_once: true
      delegate_to: "{{ report_host }}"

    - name: Verify report file exists on report host
      ansible.windows.win_stat:
        path: "{{ report_file }}"
      register: report_stat
      run_once: true
      delegate_to: "{{ report_host }}"

    - name: Debug report file existence
      ansible.builtin.debug:
        msg: "Report {{ report_file }} exists={{ report_stat.stat.exists }}, isreg={{ report_stat.stat.isreg }}"
      run_once: true
      delegate_to: "{{ report_host }}"
