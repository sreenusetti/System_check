---
- name: Health Check for Linux and Windows Nodes using Git-hosted Scripts
  hosts: all
  gather_facts: true

  tasks:
    - name: Set OS family fact
      ansible.builtin.set_fact:
        os_family: "{{ ansible_facts['os_family'] }}"

    # ================================
    # Linux Section – check.sh
    # ================================
    - name: Copy check.sh to Linux node
      ansible.builtin.copy:
        src: scripts/check.sh
        dest: /usr/local/bin/check.sh
        mode: '0755'
      when: os_family == "RedHat"

    - name: Run check.sh on Linux
      ansible.builtin.shell: /usr/local/bin/check.sh
      register: linux_script_out
      changed_when: false
      when: os_family == "RedHat"

    # ================================
    # Windows Section – check.ps1
    # ================================
    - name: Ensure C:\Scripts exists on Windows
      ansible.windows.win_file:
        path: C:\Scripts
        state: directory
      when: os_family == "Windows"

    - name: Copy check.ps1 to Windows node
      ansible.windows.win_copy:
        src: scripts/check.ps1
        dest: C:\Scripts\check.ps1
      when: os_family == "Windows"

    - name: Run check.ps1 on Windows
      ansible.windows.win_shell: C:\Scripts\check.ps1
      register: win_script_out
      changed_when: false
      when: os_family == "Windows"

    # ================================
    # Parse outputs into per-host facts
    # ================================
    - name: Extract CPU, RAM, DISK values
      ansible.builtin.set_fact:
        cpu: >-
          {{
            ( (linux_script_out.stdout if os_family == 'RedHat' else
                win_script_out.stdout if os_family == 'Windows' else '')
              | regex_search('CPU=(\\d+\\.?\\d*)', '\\1')
              | default('0') )
            | float
          }}
        ram: >-
          {{
            ( (linux_script_out.stdout if os_family == 'RedHat' else
                win_script_out.stdout if os_family == 'Windows' else '')
              | regex_search('RAM=(\\d+\\.?\\d*)', '\\1')
              | default('0') )
            | float
          }}
        disk: >-
          {{
            ( (linux_script_out.stdout if os_family == 'RedHat' else
                win_script_out.stdout if os_family == 'Windows' else '')
              | regex_search('DISK=(\\d+\\.?\\d*)', '\\1')
              | default('0') )
            | float
          }}

    - name: Determine health status
      ansible.builtin.set_fact:
        status: >-
          {{ 'CRITICAL'
             if cpu > 60 or ram > 60 or disk > 60
             else 'GOOD' }}

    - name: Debug per-host health
      ansible.builtin.debug:
        msg:
          - "Host {{ inventory_hostname }} → CPU={{ cpu }}% RAM={{ ram }}% DISK={{ disk }}% STATUS={{ status }}"

- name: Save Health Summary on Windows Node 10.206.2.30
  hosts: 10.206.2.30
  gather_facts: true

  vars:
    log_dir:  C:\Temp\logfile
    log_file: "{{ log_dir }}\\health_check_{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:
    - name: Ensure log directory exists
      ansible.windows.win_file:
        path: "{{ log_dir }}"
        state: directory

    - name: Verify log directory exists
      ansible.windows.win_stat:
        path: "{{ log_dir }}"
      register: dir_stat
      failed_when: not dir_stat.stat.exists or not dir_stat.stat.isdir

    - name: Build health summary content
      ansible.builtin.set_fact:
        summary_output: |
          ####################################################################
          #                Node Health Check Summary Report                 #
          ####################################################################
          {% for host in ansible_play_hosts_all %}
          Host:   {{ '%-20s'|format(hostvars[host].inventory_hostname) }}
          OS:     {{ '%-10s'|format(hostvars[host].os_family | default('N/A')) }}
          CPU:    {{ '%6.2f%%'|format(hostvars[host].cpu  | default(0)) }}
          RAM:    {{ '%6.2f%%'|format(hostvars[host].ram  | default(0)) }}
          DISK:   {{ '%6.2f%%'|format(hostvars[host].disk | default(0)) }}
          STATUS: {{ hostvars[host].status | default('UNKNOWN') }}
          --------------------------------------------------------------------
          {% endfor %}
          Job ID:      {{ awx_job_id | default('manual_job_' + ansible_date_time.iso8601_basic_short) }}
          Time:        {{ ansible_date_time.iso8601 }}
          Executed by: {{ ansible_user_id }}
          Log File:    {{ log_file }}
          ####################################################################

    - name: Write health summary to log file
      ansible.windows.win_copy:
        content: "{{ summary_output }}"
        dest:    "{{ log_file }}"
      register: file_creation
      failed_when: not file_creation.changed

    - name: Verify log file exists
      ansible.windows.win_stat:
        path: "{{ log_file }}"
      register: log_file_stat
      failed_when: not log_file_stat.stat.exists or not log_file_stat.stat.isreg

    - name: Debug log file existence
      ansible.builtin.debug:
        msg: "Log file {{ log_file }} exists={{ log_file_stat.stat.exists }}, isreg={{ log_file_stat.stat.isreg }}"

    - name: Fail if log file wasn’t created
      ansible.builtin.fail:
        msg: "Could not write health summary to {{ log_file }} – check permissions."
      when: not (log_file_stat.stat.exists and log_file_stat.stat.isreg)

    - name: Print summary in AWX job output
      ansible.builtin.debug:
        msg: "{{ summary_output.split('\n') }}"
