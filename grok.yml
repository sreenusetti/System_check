---
- name: Health Check for Linux and Windows Nodes using External Scripts
  hosts: all
  gather_facts: true

  # Variables for the reporting task
  vars:
    report_host: '10.206.2.30'
    report_dir: 'C:\Temp\logs'
    report_file: "{{ report_dir }}\\health_report_{{ awx_job_id | default('manual_run_' + ansible_date_time.iso8601_basic_short) }}.log"
    # Define script paths for convenience
    linux_script_dest: /tmp/check.sh
    windows_script_dest: C:\Temp\check.ps1

  tasks:
    # =========================================================
    # BLOCK 1: Per-host script execution
    # =========================================================
    - name: Deploy and execute health check script for each host
      block:
        # --- Linux Actions ---
        - name: Copy and run check.sh for RedHat hosts
          when: ansible_facts['os_family'] == "RedHat"
          block:
            - name: Copy check.sh to remote host
              ansible.builtin.copy:
                src: check.sh # Assumes check.sh is next to the playbook
                dest: "{{ linux_script_dest }}"
                mode: '0755'
            - name: Execute check.sh and capture JSON output
              ansible.builtin.command: "{{ linux_script_dest }}"
              register: linux_results
              changed_when: false

        # --- Windows Actions ---
        - name: Copy and run check.ps1 for Windows hosts
          when: ansible_facts['os_family'] == "Windows"
          block:
            - name: Copy check.ps1 to remote host
              ansible.windows.win_copy:
                src: check.ps1 # Assumes check.ps1 is next to the playbook
                dest: "{{ windows_script_dest }}"
            - name: Execute check.ps1 and capture JSON output
              ansible.windows.win_powershell:
                script: "{{ windows_script_dest }}"
              register: windows_results
              changed_when: false

    # =========================================================
    # BLOCK 2: Final Reporting (Logic is now inside the template)
    # =========================================================
    - name: Generate and save the consolidated report
      run_once: true
      delegate_to: "{{ report_host }}"
      block:
        - name: Ensure log directory exists on the report host
          ansible.windows.win_file:
            path: "{{ report_dir }}"
            state: directory

        - name: Write summary report to the log file
          ansible.windows.win_copy:
            dest: "{{ report_file }}"
            content: |
              ####################################################################
              #                 Node Health Check Summary Report                 #
              ####################################################################
              {% for host in ansible_play_hosts_all %}
              {# --- This block replaces set_fact. It defines temporary variables for each host inside the loop --- #}
              {% if hostvars[host].ansible_facts.os_family == 'RedHat' and hostvars[host].linux_results is defined %}
                {% set results = hostvars[host].linux_results.stdout | from_json %}
                {% set status = 'CRITICAL' if results.cpu | float > 60 or results.ram | float > 60 or results.disk | float > 60 else 'GOOD' %}
                {% set cpu_val = (results.cpu | string) + '%' %}
                {% set ram_val = (results.ram | string) + '%' %}
                {% set disk_val = (results.disk | string) + '%' %}

              {% elif hostvars[host].ansible_facts.os_family == 'Windows' and hostvars[host].windows_results is defined %}
                {% set results = hostvars[host].windows_results.stdout | from_json %}
                {% set status = 'CRITICAL' if results.cpu | float > 60 or results.ram | float > 60 or results.disk | float > 60 else 'GOOD' %}
                {% set cpu_val = (results.cpu | string) + '%' %}
                {% set ram_val = (results.ram | string) + '%' %}
                {% set disk_val = (results.disk | string) + '%' %}

              {% else %}
                {# --- Fallback for unreachable hosts or unsupported OS --- #}
                {% set status = 'FAILED_TO_GATHER' %}
                {% set cpu_val = 'N/A' %}
                {% set ram_val = 'N/A' %}
                {% set disk_val = 'N/A' %}
              {% endif %}
              {# --- This is the line that gets printed for each host, using the variables defined above --- #}
              HOST: {{ '%-20s' | format(hostvars[host].inventory_hostname) }} | OS: {{ '%-10s' | format(hostvars[host].ansible_facts.os_family | default('N/A')) }} | CPU: {{ '%-8s' | format(cpu_val) }} | RAM: {{ '%-8s' | format(ram_val) }} | Disk: {{ '%-8s' | format(disk_val) }} | STATUS: {{ status }}
              {% endfor %}

              ####################################################################
              # Job ID:        {{ awx_job_id | default('N/A - Manual Run') }}
              # Executed at:   {{ ansible_date_time.iso8601 }}
              ####################################################################

    # =========================================================
    # BLOCK 3: Cleanup
    # =========================================================
    - name: Clean up scripts from target nodes
      block:
        - name: Remove script from RedHat hosts
          when: ansible_facts['os_family'] == "RedHat"
          ansible.builtin.file:
            path: "{{ linux_script_dest }}"
            state: absent
        - name: Remove script from Windows hosts
          when: ansible_facts['os_family'] == "Windows"
          ansible.windows.win_file:
            path: "{{ windows_script_dest }}"
            state: absent
