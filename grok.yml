---
- name: Health Check for Linux and Windows Nodes
  hosts: all
  gather_facts: true

  tasks:
    - name: Debug first play execution
      ansible.builtin.debug:
        msg: "Starting health check for host {{ inventory_hostname }}"

    - name: Set OS family fact
      ansible.builtin.set_fact:
        os_family: "{{ ansible_facts['os_family'] }}"
      register: set_fact_result
      failed_when: set_fact_result.failed

    - name: Debug OS family
      ansible.builtin.debug:
        msg: "OS family set to {{ os_family }} for host {{ inventory_hostname }}"

    # --- Linux check ---
    - name: Run check.sh on Linux
      when: os_family == "RedHat"
      ansible.builtin.script: scripts/check.sh
      register: linux_script_out
      changed_when: false
      failed_when: linux_script_out.rc != 0

    # --- Windows check ---
    - name: Run check.ps1 on Windows
      when: os_family == "Windows"
      block:
        - name: Ensure Windows temp directory exists
          ansible.windows.win_file:
            path: C:\Temp
            state: directory

        - name: Copy check.ps1 to Windows node
          ansible.windows.win_copy:
            src: scripts/check.ps1
            dest: C:\Temp\check.ps1

        - name: Execute check.ps1
          ansible.windows.win_shell: C:\Temp\check.ps1
          register: win_script_out
          changed_when: false
          failed_when: win_script_out.rc != 0

    # --- Parse Output & Determine Status ---
    - name: Parse script output and determine status
      ansible.builtin.set_fact:
        cpu: >
          {{
            (script_output
             | regex_findall('CPU=(\\d+\\.?\\d*)')
             | first
             | default('0', true))
          }}
        ram: >
          {{
            (script_output
             | regex_findall('RAM=(\\d+\\.?\\d*)')
             | first
             | default('0', true))
          }}
        disk: >
          {{
            (script_output
             | regex_findall('DISK=(\\d+\\.?\\d*)')
             | first
             | default('0', true))
          }}
        status: >-
          {{ 'CRITICAL'
             if (cpu  | float > 60)
             or (ram  | float > 60)
             or (disk | float > 60)
             else 'GOOD' }}
      vars:
        # Always define script_output as a string
        script_output: >-
          {{ linux_script_out.stdout
             if os_family == 'RedHat'
             else win_script_out.stdout
             if os_family == 'Windows'
             else '' }}


# ----------------------------------------------------------------------
- name: Save Health Summary on Windows Node 10.206.2.30
  hosts: 10.206.2.30
  gather_facts: true
  vars:
    log_dir:  C:\Temp\logfile
    log_file: "{{ log_dir }}\\health_check_{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:
    - name: Debug second play execution
      ansible.builtin.debug:
        msg: "Starting log file creation on {{ inventory_hostname }} as user {{ ansible_user_id }}"

    - name: Debug log file path
      ansible.builtin.debug:
        msg: "Log file will be created at: {{ log_file }}"

    - name: Ensure log directory exists on Windows node
      ansible.windows.win_file:
        path: "{{ log_dir }}"
        state: directory
      register: dir_creation

    - name: Verify log directory exists
      ansible.windows.win_stat:
        path: "{{ log_dir }}"
      register: dir_stat
      failed_when: not dir_stat.stat.exists or not dir_stat.stat.isdir

    - name: Debug log directory existence
      ansible.builtin.debug:
        msg: "Log directory {{ log_dir }} exists: {{ dir_stat.stat.exists }} and is a directory: {{ dir_stat.stat.isdir }}"

    - name: Build health summary content
      ansible.builtin.set_fact:
        summary_output: |
          ####################################################################
          #                    Node Health Check Report                      #
          ####################################################################
          {% for host in hostvars if hostvars[host].cpu is defined %}
          Hostname: {{ '%-20s' | format(hostvars[host].inventory_hostname) }}
          OS:       {{ hostvars[host].os_family | default('N/A') }}
          CPU:      {{ hostvars[host].cpu  | float | round(2) }}%
          RAM:      {{ hostvars[host].ram  | float | round(2) }}%
          DISK:     {{ hostvars[host].disk | float | round(2) }}%
          STATUS:   {{ hostvars[host].status | default('SUCCESS') }}
          --------------------------------------------------------------------
          {% endfor %}
          Job ID:      {{ awx_job_id | default('manual_job_' + ansible_date_time.iso8601_basic_short) }}
          Time:        {{ ansible_date_time.iso8601 }}
          Executed by: {{ ansible_user_id }}
          Log File:    {{ log_file }}
          ####################################################################

    - name: Write health summary to log file on Windows node
      ansible.windows.win_copy:
        content: "{{ summary_output }}"
        dest:    "{{ log_file }}"
      register: file_creation
      failed_when: not file_creation.changed

    - name: Verify log file exists
      ansible.windows.win_stat:
        path: "{{ log_file }}"
      register: log_file_stat
      failed_when: not log_file_stat.stat.exists or not log_file_stat.stat.isfile

    - name: Debug log file existence
      ansible.builtin.debug:
        msg: "Log file {{ log_file }} exists: {{ log_file_stat.stat.exists }} and is a regular file: {{ log_file_stat.stat.isfile }}"

    - name: Set playbook status based on log file creation
      ansible.builtin.set_fact:
        playbook_status: "{{ 'SUCCESS' if log_file_stat.stat.exists and log_file_stat.stat.isfile else 'FAILED' }}"

    - name: Fail playbook if log file creation failed
      ansible.builtin.fail:
        msg: "Playbook failed: Log file {{ log_file }} was not created successfully on {{ inventory_hostname }}. Check permissions for {{ log_dir }}."
      when: playbook_status == 'FAILED'

    - name: Print health summary in job output
      ansible.builtin.debug:
        msg: "{{ summary_output.split('\n') }}"
