---
- name: Health Check for Linux and Windows Nodes using External Scripts
  hosts: all
  gather_facts: true

  vars:
    report_host: '10.206.2.30'
    report_dir: 'C:\Temp\logs'
    report_file: "{{ report_dir }}\\health_report_{{ awx_job_id | default('manual_run_' + ansible_date_time.iso8601_basic_short) }}.log"
    linux_script_dest: /tmp/1.sh
    windows_script_dest: C:\Temp\1.ps1

  tasks:
    # =========================================================
    # BLOCK 1: Per-host script execution
    # =========================================================
    - name: Run check script on RedHat hosts
      when: ansible_facts['os_family'] == "RedHat"
      block:
        - name: Copy 1.sh to remote host
          ansible.builtin.copy:
            src: scripts/1.sh
            dest: "{{ linux_script_dest }}"
            mode: '0755'
        - name: Execute 1.sh and capture JSON output
          ansible.builtin.shell: "{{ linux_script_dest }}"
          register: linux_results
          changed_when: false

    - name: Run check script on Windows hosts
      when: ansible_facts['os_family'] == "Windows"
      block:
        - name: Copy 1.ps1 to remote host
          ansible.windows.win_copy:
            src: scripts/1.ps1
            dest: "{{ windows_script_dest }}"
        # [FIXED] Switched from 'win_powershell' to 'win_shell' to correctly execute the script file.
        - name: Execute 1.ps1 and capture JSON output
          ansible.windows.win_shell: "{{ windows_script_dest }}"
          register: windows_results
          changed_when: false

    # =========================================================
    # BLOCK 2: Final Reporting
    # =========================================================
    - name: Generate and save the consolidated report
      run_once: true
      delegate_to: "{{ report_host }}"
      block:
        - name: Ensure log directory exists on the report host
          ansible.windows.win_file:
            path: "{{ report_dir }}"
            state: directory

        - name: Write summary report to the log file
          ansible.windows.win_copy:
            dest: "{{ report_file }}"
            content: |
              ####################################################################
              #                 Node Health Check Summary Report                 #
              ####################################################################
              {% for host in ansible_play_hosts_all %}
              {% set data_found = false %}

              {#--- Check for Linux results first ---#}
              {% if 'stdout' in hostvars[host].linux_results %}
                {% set results = hostvars[host].linux_results.stdout | from_json %}
                {% set data_found = true %}

              {#--- If not Linux, check for Windows results ---#}
              {% elif 'stdout' in hostvars[host].windows_results %}
                {% set results = hostvars[host].windows_results.stdout | from_json %}
                {% set data_found = true %}
              {% endif %}

              {#--- Now, based on whether data was found, format the output line ---#}
              {% if data_found %}
                {% set status = 'CRITICAL' if results.cpu > 60 or results.ram > 60 or results.disk > 60 else 'GOOD' %}
                {% set cpu_val = (results.cpu | string) + '%' %}
                {% set ram_val = (results.ram | string) + '%' %}
                {% set disk_val = (results.disk | string) + '%' %}
              {% else %}
                {% set status = 'FAILED_TO_GATHER' %}
                {% set cpu_val = 'N/A' %}
                {% set ram_val = 'N/A' %}
                {% set disk_val = 'N/A' %}
              {% endif %}
              {#--- This is the line that gets printed for each host ---#}
              HOST: {{ '%-20s' | format(hostvars[host].inventory_hostname) }} | OS: {{ '%-10s' | format(hostvars[host].ansible_facts.os_family | default('N/A')) }} | CPU: {{ '%-8s' | format(cpu_val) }} | RAM: {{ '%-8s' | format(ram_val) }} | Disk: {{ '%-8s' | format(disk_val) }} | STATUS: {{ status }}
              {% endfor %}

              ####################################################################
              # Job ID:        {{ awx_job_id | default('N/A - Manual Run') }}
              # Executed at:   {{ ansible_date_time.iso8601 }}
              ####################################################################

    # =========================================================
    # BLOCK 3: Cleanup (Good Practice)
    # =========================================================
    - name: Clean up scripts from target nodes
      ignore_errors: true
      block:
        - name: Remove script from RedHat hosts
          when: ansible_facts['os_family'] == "RedHat"
          ansible.builtin.file:
            path: "{{ linux_script_dest }}"
            state: absent
        - name: Remove script from Windows hosts
          when: ansible_facts['os_family'] == "Windows"
          ansible.windows.win_file:
            path: "{{ windows_script_dest }}"
            state: absent
