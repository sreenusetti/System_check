---
- name: Health Check for Linux and Windows Nodes using Git-hosted Scripts
  hosts: all
  gather_facts: true

  tasks:
    # --- (All your data gathering tasks remain the same) ---
    - name: Set OS family fact
      set_fact:
        os_family: "{{ ansible_facts['os_family'] }}"

    - name: Run check.sh on Linux
      when: os_family == "RedHat"
      script: scripts/check.sh
      register: linux_script_out
      changed_when: false

    - name: Run check.ps1 on Windows
      when: os_family == "Windows"
      block:
        - win_file:
            path: C:\Temp
            state: directory
        - win_copy:
            src: scripts/check.ps1
            dest: C:\Temp\check.ps1
        - win_shell: C:\Temp\check.ps1
          register: win_script_out
          changed_when: false

    - name: Parse output, set facts, and determine status atomically
      set_fact:
        cpu: "{{ cpu_val }}"
        ram: "{{ ram_val }}"
        disk: "{{ disk_val }}"
        status: "{{ 'CRITICAL' if cpu_val | float > 60 or ram_val | float > 60 or disk_val | float > 60 else 'GOOD' }}"
      vars:
        script_output: "{{ linux_script_out.stdout if os_family == 'RedHat' else win_script_out.stdout }}"
        cpu_val: "{{ script_output | regex_search('CPU=(\\d+\\.?\\d*)', '\\1') | first | default(0) }}"
        ram_val: "{{ script_output | regex_search('RAM=(\\d+\\.?\\d*)', '\\1') | first | default(0) }}"
        disk_val: "{{ script_output | regex_search('DISK=(\\d+\\.?\\d*)', '\\1') | first | default(0) }}"

    # ================================
    # Summary Reporting
    # ================================
    - name: Generate and display final report
      run_once: true
      delegate_to: localhost
      block:
        # --- Task 1: Construct the report content ---
        - name: Construct full health summary
          set_fact:
            summary_output: |
              ####################################################################
              #              Node Health Check Summary Report                    #
              ####################################################################
              {% for host in ansible_play_hosts_all %}
              HOST: {{ '%-20s' | format(hostvars[host].inventory_hostname) }} | OS: {{ '%-10s' | format(hostvars[host].os_family | default('N/A')) }} | CPU: {{ '%-8s' | format((hostvars[host].cpu | float | round(2) | string ~ '%') if hostvars[host].cpu is defined else 'N/A') }} | RAM: {{ '%-8s' | format((hostvars[host].ram | float | round(2) | string ~ '%') if hostvars[host].ram is defined else 'N/A') }} | Disk: {{ '%-8s' | format((hostvars[host].disk | float | round(2) | string ~ '%') if hostvars[host].disk is defined else 'N/A') }} | STATUS: {{ hostvars[host].status | default('FAILED_TO_GATHER') }}
              {% endfor %}
              ####################################################################

        # --- Task 2: Print the report to the AWX Job Log (This is your permanent log) ---
        - name: Print summary to console (This is the official job log)
          debug:
            msg: "{{ summary_output.split('\n') }}"

        # --- Task 3 (Optional): Create a temporary file inside the job container ---
        - name: Save summary to a TEMPORARY log file for debugging
          # NOTE: This file will be DELETED when the job finishes.
          # The REAL permanent log is the debug output above.
          # The blockinfile module is more suitable here than copy.
          blockinfile:
            path: "/tmp/health_check_report_{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}.log"
            create: yes
            block: "{{ summary_output }}"
