---
- name: Health Check for Linux and Windows Nodes using Git-hosted Scripts
  hosts: all
  gather_facts: true

  tasks:
    - name: Set OS family fact
      set_fact:
        os_family: "{{ ansible_facts['os_family'] }}"

    # ================================
    # Linux Section - check.sh
    # ================================
    - name: Copy check.sh to Linux node
      when: os_family == "RedHat"
      copy:
        src: scripts/check.sh
        dest: /usr/local/bin/check.sh
        mode: '0755'

    - name: Run check.sh on Linux
      when: os_family == "RedHat"
      shell: /usr/local/bin/check.sh
      register: linux_script_out
      changed_when: false

    # ================================
    # Windows Section - check.ps1
    # ================================
    - name: Ensure C:\Scripts exists on Windows
      when: os_family == "Windows"
      win_file:
        path: C:\Scripts
        state: directory

    - name: Copy check.ps1 to Windows node
      when: os_family == "Windows"
      win_copy:
        src: scripts/check.ps1
        dest: C:\Scripts\check.ps1

    - name: Run check.ps1 on Windows
      when: os_family == "Windows"
      win_shell: C:\Scripts\check.ps1
      register: win_script_out
      changed_when: false

    # ================================
    # Parse Output and Set Health Status
    # ================================
    - name: Parse script output and set resource facts
      set_fact:
        cpu: "{{ (script_output | regex_search('CPU=(\\d+\\.?\\d*)', '\\1') | first | float) }}"
        ram: "{{ (script_output | regex_search('RAM=(\\d+\\.?\\d*)', '\\1') | first | float) }}"
        disk: "{{ (script_output | regex_search('DISK=(\\d+\\.?\\d*)', '\\1') | first | float) }}"
      vars:
        script_output: >-
          {{
            linux_script_out.stdout if os_family == 'RedHat'
            else win_script_out.stdout
          }}

    - name: Determine health status
      set_fact:
        status: "{{ 'CRITICAL' if (cpu | float) > 60 or (ram | float) > 60 or (disk | float) > 60 else 'GOOD' }}"

    # ================================
    # Summary Report + Save to Host
    # ================================
    - name: Generate timestamp
      run_once: true
      delegate_to: localhost
      set_fact:
        job_log_id: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

    - name: Construct full health summary
      run_once: true
      delegate_to: localhost
      set_fact:
        summary_output: |
          ####################################################################
          #              Node Health Check Summary Report                    #
          ####################################################################
          {% for host in ansible_play_hosts_all %}
          HOST: {{ '%-20s' | format(hostvars[host].inventory_hostname) }} | OS: {{ '%-10s' | format(hostvars[host].os_family | default('N/A')) }} | CPU: {{ '%-8s' | format((hostvars[host].cpu | float | round(2) | string ~ '%') if hostvars[host].cpu is defined else 'N/A') }} | RAM: {{ '%-8s' | format((hostvars[host].ram | float | round(2) | string ~ '%') if hostvars[host].ram is defined else 'N/A') }} | Disk: {{ '%-8s' | format((hostvars[host].disk | float | round(2) | string ~ '%') if hostvars[host].disk is defined else 'N/A') }} | STATUS: {{ hostvars[host].status | default('FAILED_TO_GATHER') }}
          {% endfor %}
          ####################################################################
          Job Run Time: {{ ansible_date_time.date }} {{ ansible_date_time.time }}
          Job ID: {{ job_log_id }}
          Executed By: {{ ansible_user_id }}
          ####################################################################

    - name: Print summary to console
      run_once: true
      debug:
        msg: "{{ summary_output }}"

    - name: Write summary to real AWX host path
      run_once: true
      delegate_to: localhost
      local_action:
        module: copy
        content: "{{ summary_output }}"
        dest: "/var/log/ansible_health_logs/health_check_{{ job_log_id }}.log"
